
type Chat {
	id: String
	owner: String
	users: [String!]
	chatType: ChatType
	name: String
	lastMsg: String
	userLastMsg: JSONObject
}

type ChatConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ChatEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Chat!]!
}

"""
An edge in a connection.
"""
type ChatEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	The item at the end of the edge
	"""
	node: Chat!
}

type ChatMessage {
	id: String
	chat: String
	user: String
	edit: Int
	message: String
}

type ChatMessageChange {
	change: SubscriptionChange!
	message: ChatMessage!
}

type ChatMessageConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ChatMessageEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ChatMessage!]!
}

"""
An edge in a connection.
"""
type ChatMessageEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	The item at the end of the edge
	"""
	node: ChatMessage!
}

enum ChatType {
	USER_PRIVATE
	PRIVATE
	GROUP
}


enum Gender {
	NONE
	MALE
	FEMALE
	OTHER
}


input InputFindUser {
	nameUser: String!
	limit: Int
}

input InputUserLogin {
	nameUser: String!
	password: String!
}


"""
A scalar that can represent any JSON Object value.
"""
scalar JSONObject

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type QueryChat {
	createUserPrivate: Chat
	createPrivate(userId: String!): Chat
	getChats(after: String, before: String, first: Int, last: Int): ChatConnection!
	getMessages(chat: String!, after: String, before: String, first: Int, last: Int): ChatMessageConnection!
	sendMessage(chat: String!, message: String!): ChatMessage
	removeMessages(chat: String!, messages: [String!]!): Boolean
	removeChat(chat: String!): Boolean
}

type QuerySession {
	user: User
	findUser(data: InputFindUser!): [User!]!
	getUser(id: String!): User!
	register(data: InputUserLogin!): User!
	logIn(data: InputUserLogin!): User!
	logOut: Boolean!
}

type RootQuery {
	session: QuerySession!
	chat: QueryChat!
}

type RootSubscription {
	watchMessages(chat: String!): ChatMessageChange!
	interval(n: Int! = 1): Int!
}


enum SubscriptionChange {
	NEW
	DELETE
	UPDATE
}

type User {
	id: String
	nameUser: String
	nameDisplay: String
	gender: Gender
	mail: String
	age: Int
}

schema {
	query: RootQuery
	subscription: RootSubscription
}
